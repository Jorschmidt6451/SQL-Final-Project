-- Department table
CREATE TABLE department (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL
);

-- Positions table
CREATE TABLE position (
    position_id SERIAL PRIMARY KEY,
    position_name VARCHAR(100) NOT NULL
);

-- Store table
CREATE TABLE store (
    store_id SERIAL PRIMARY KEY,
    store_name VARCHAR(100),
    state VARCHAR(20),
    city VARCHAR(50),
    street VARCHAR(50),
    zip VARCHAR(10)
);

-- Employee table
CREATE TABLE employee (
    employee_id SERIAL PRIMARY KEY,
    store_id INT NOT NULL,
    dept_id INT NOT NULL,
    position_id INT NOT NULL,
    first_name VARCHAR(30) NOT NULL,
    last_name VARCHAR(30) NOT NULL,
    email VARCHAR(100) NOT NULL,
    phone_number VARCHAR(15) NOT NULL,
    state VARCHAR(20) NOT NULL,
    city VARCHAR(50) NOT NULL,
    street VARCHAR(100) NOT NULL,
    zip VARCHAR(10) NOT NULL,
    hire_date DATE NOT NULL,
    CONSTRAINT fk_store FOREIGN KEY (store_id) REFERENCES store(store_id),
    CONSTRAINT fk_dept FOREIGN KEY (dept_id) REFERENCES department(dept_id),
    CONSTRAINT fk_position FOREIGN KEY (position_id) REFERENCES position(position_id)
);

-- Payroll table
CREATE TABLE payroll (
    payroll_id SERIAL PRIMARY KEY,
    employee_id INT NOT NULL,
    pay_period_start DATE NOT NULL,
    pay_period_end DATE NOT NULL,
    hour_wage NUMERIC(10,2) NOT NULL,
    CONSTRAINT fk_employee_payroll FOREIGN KEY (employee_id) REFERENCES employee(employee_id)
);

-- Employee Schedule table
CREATE TABLE employee_schedule (
    schedule_id SERIAL PRIMARY KEY,
    employee_id INT NOT NULL,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    CONSTRAINT fk_employee_schedule FOREIGN KEY (employee_id) REFERENCES employee(employee_id) 
        ON DELETE CASCADE ON UPDATE CASCADE
);

-- Employee Time Tracking table
CREATE TABLE employee_time_tracking (
    time_tracking_id SERIAL PRIMARY KEY,
    employee_id INT NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_employee_time_tracking FOREIGN KEY (employee_id) REFERENCES employee(employee_id),
    CONSTRAINT fk_schedule_time_tracking FOREIGN KEY (schedule_id) REFERENCES employee_schedule(schedule_id),
    CONSTRAINT chk_end_after_start CHECK (end_time IS NULL OR end_time > start_time)
);

-- Vendors table
CREATE TABLE vendors (
    vendor_id SERIAL PRIMARY KEY,
    vendor_name VARCHAR(20) UNIQUE NOT NULL,
    phone_number VARCHAR(12),
    email VARCHAR(50),
    website VARCHAR(100),
    CONSTRAINT chk_vendor_contact CHECK (
        (phone_number IS NOT NULL OR email IS NOT NULL OR website IS NOT NULL)
    )
);

-- Products table
CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    dept_id INT,
    vendor_id INT,
    brand VARCHAR(50),
    product_name VARCHAR(100),
    CONSTRAINT fk_dept_products FOREIGN KEY (dept_id) REFERENCES department(dept_id),
    CONSTRAINT fk_vendor_products FOREIGN KEY (vendor_id) REFERENCES vendors(vendor_id)
);

-- Pricing History table
CREATE TABLE price_history (
    history_id SERIAL PRIMARY KEY,
    product_id INT NOT NULL,
    store_id INT,
    price DECIMAL(10, 2) NOT NULL CHECK (price > 0.01),
    effective_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_product_price_history FOREIGN KEY (product_id) REFERENCES products(product_id),
    CONSTRAINT fk_store_price_history FOREIGN KEY (store_id) REFERENCES store(store_id)
);

-- Deliveries table
CREATE TABLE deliveries (
    delivery_id SERIAL PRIMARY KEY,
    product_id INT NOT NULL,
    vendor_id INT NOT NULL,
    store_id INT NOT NULL,
    delivery_date DATE NOT NULL,
    quantity INT NOT NULL,
    CONSTRAINT fk_product_deliveries FOREIGN KEY (product_id) REFERENCES products(product_id),
    CONSTRAINT fk_vendor_deliveries FOREIGN KEY (vendor_id) REFERENCES vendors(vendor_id),
    CONSTRAINT fk_store_deliveries FOREIGN KEY (store_id) REFERENCES store(store_id),
    CONSTRAINT chk_delivery_quantity CHECK (quantity > 0)
);

-- Inventory table
CREATE TABLE inventory (
    inventory_id SERIAL PRIMARY KEY,
    store_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL DEFAULT 0,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_store_inventory FOREIGN KEY (store_id) REFERENCES store(store_id),
    CONSTRAINT fk_product_inventory FOREIGN KEY (product_id) REFERENCES products(product_id),
    CONSTRAINT chk_inventory_quantity CHECK (quantity >= 0)
);

-- Transactions table
CREATE TABLE transactions (
    transaction_id SERIAL PRIMARY KEY,
    store_id INT NOT NULL,
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    transaction_type INT NOT NULL CHECK (transaction_type IN (0, 1)), -- 0 is for sale and 1 is for a return
    CONSTRAINT fk_store_transactions FOREIGN KEY (store_id) REFERENCES store(store_id)
);

-- Sales table
CREATE TABLE sales (
    sale_id SERIAL PRIMARY KEY,
    transaction_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    CONSTRAINT fk_transaction_sales FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id),
    CONSTRAINT fk_product_sales FOREIGN KEY (product_id) REFERENCES products(product_id),
    CONSTRAINT chk_sale_quantity CHECK (quantity > 0)
);

-- Customers table
CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone_number VARCHAR(15),
    date_joined TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Customer Reviews table
CREATE TABLE customer_reviews (
    review_id SERIAL PRIMARY KEY,
    customer_id INT NOT NULL,
    store_id INT,
    product_id INT,
    rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5),
    review_text TEXT,
    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_customer_reviews FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    CONSTRAINT fk_store_reviews FOREIGN KEY (store_id) REFERENCES store(store_id),
    CONSTRAINT fk_product_reviews FOREIGN KEY (product_id) REFERENCES products(product_id),
    CONSTRAINT chk_review_entity CHECK (store_id IS NOT NULL OR product_id IS NOT NULL)
);

-- Product Waste table
CREATE TABLE product_waste (
    waste_id SERIAL PRIMARY KEY,
    product_id INT NOT NULL,
    store_id INT NOT NULL,
    dept_id INT,
    quantity INT NOT NULL CHECK (quantity > 0),
    waste_reason VARCHAR(255) NOT NULL,
    waste_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_product_waste FOREIGN KEY (product_id) REFERENCES products(product_id),
    CONSTRAINT fk_store_waste FOREIGN KEY (store_id) REFERENCES store(store_id),
    CONSTRAINT fk_dept_waste FOREIGN KEY (dept_id) REFERENCES department(dept_id)
);
